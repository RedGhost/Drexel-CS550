# Group 3
# assignment 5
# Timothy Hanna - Assignment 5 group leader
# Zachary Long
# Mateusz Stankiewicz
# Mark Albrecht
#

### Common File(s) ###
  README                    - The file you are currently reading.
  makefile                  - Makefile with view/build/clean commands
  ch4-mceval.scm            - The SICP interpreter

### Part 1 ###
- view cmd: 'make view-p1'
- details:
  Implementation of the proposition calculus functions
- Running:
  start scheme and load file: (load "part1.scm")
- Source File(s):
  part1.scm  - Scheme source file that contains the proposition calculus functions

### Part 2 ###
- view cmd: 'make view-p2'
- details:
  Implementation of the  tautologies prover using the proposition calculus functions.
  Given an expression and a list of variables, it creates all truth tables and calls
  the expression on each. If any are false, it returns false.
- Running:
  start scheme and load file: (load "part2.scm")
  Call the taut function with exp and varlist: (taut '(and p p) '(p))
- Source File(s):
  part2.scm  - Loads part2.scm then defined additional functions for tautology proving


### Part 3 ###
- view cmd: 'make view-p3'
- details:
  For part 3, the scheme file loads the SICP file, turns on tracing for all of the functions,
  then defines and calls the fact function. The output is a tracing of the interpretation.
- Running:
  make run-p3
- Source File(s):
  part3.scm  - Loads ch4-mceval.scm, turns on tracing, then defined and runs the fact function


### Part 4 ###
- view cmd: 'make view-p4'
- details:
  Update of the SICP interpreter to use dynamic scope instead of static.
- Running:
  make run-p4
- Source File(s):
  ch4-mceval-dynamic.scm - Updated version of SICP
- Input Files(s):
  part4-dynamic.scm - input for the dynamic version
  part4-static.scm - input for the static version


### Part 5 ###
- view cmd: 'make view-p5'
- details:
  Implementation of the mini-language interpreter
- Running:
  Start scheme and load the file: (load "part5.scm")
- Source File(s):
  part5.scm - The file containing the functions for the mini-language interpreter
- Input Files(s):

### Testing ###
Testing was done by running against the sample input files.
